#include <Wire.h>
#include <Adafruit_BMP280.h>
#include <Adafruit_NeoPixel.h>
#include <LittleFS.h>

// --------- Pins ---------
#define I2C_SDA_PIN        4
#define I2C_SCL_PIN        5
#define LOG_LEVEL_PIN     14   // LOW = logging, HIGH = idle
#define NEOPIXEL_PIN      16   // Onboard WS2812 on Waveshare RP2040 Zero
#define NUMPIXELS          1

// --------- BMP280 ---------
#define BMP_ADDR         0x76
#define SEA_LEVEL_HPA    1013.25f

// --------- Logging ---------
#define SAMPLE_MS     50      // 20 Hz
#define ZERO_SAMPLES  50
#define CSV_FILE      "/data.csv"

Adafruit_BMP280 bmp;
Adafruit_NeoPixel pixel(NUMPIXELS, NEOPIXEL_PIN, NEO_GRB + NEO_KHZ800);

bool loggingActive = false;
unsigned long t0 = 0;
float alt0 = 0.0f;
static bool lastLogPinState = HIGH;  
int flightNumber = 0;  // counts flights since last CLEAR

// ---------- NeoPixel helpers ----------
void led(uint8_t r, uint8_t g, uint8_t b) {
  pixel.setPixelColor(0, pixel.Color(r, g, b));
  pixel.show();
}
void led_idle()  { led(0, 0, 255); }
void led_log()   { led(0, 255, 0); }
void led_blink() { led(0, 50, 0); }
void led_dump()  { led(255, 255, 0); }
void led_clear() { led(255, 0, 0); }
void led_error() { led(255, 0, 128); }

// ---------- Serial command handling ----------
char cmdBuf[32];
uint8_t cmdLen = 0;

void dumpFile() {
  if (!LittleFS.exists(CSV_FILE)) {
    Serial.println(F("[BEGIN_CSV]"));
    Serial.println(F("time_s,alt_m"));
    Serial.println(F("[END_CSV]"));
    return;
  }
  File f = LittleFS.open(CSV_FILE, "r");
  if (!f) return;

  led_dump();
  Serial.println(F("[BEGIN_CSV]"));
  while (f.available()) {
    String line = f.readStringUntil('\n');
    Serial.println(line);
  }
  Serial.println(F("[END_CSV]"));
  f.close();
  if (loggingActive) led_log(); else led_idle();
}

void clearFile() {
  if (LittleFS.exists(CSV_FILE)) LittleFS.remove(CSV_FILE);
  flightNumber = 0;
  led_clear();
  delay(150);
  if (loggingActive) led_log(); else led_idle();
}

void handleSerial() {
  while (Serial.available()) {
    char c = (char)Serial.read();
    if (c == '\r') continue;
    if (c == '\n') {
      cmdBuf[cmdLen] = '\0';
      if (cmdLen) {
        if (!strcasecmp(cmdBuf, "DUMP")) {
          dumpFile();
        } else if (!strcasecmp(cmdBuf, "CLEAR")) {
          clearFile();
        } else if (!strcasecmp(cmdBuf, "STATUS")) {
          if (LittleFS.exists(CSV_FILE)) {
            File f = LittleFS.open(CSV_FILE, "r");
            Serial.print(F("loggingActive="));
            Serial.print(loggingActive ? "1" : "0");
            Serial.print(F(", bytes="));
            Serial.println(f.size());
            f.close();
          } else {
            Serial.println(F("loggingActive=0, bytes=0"));
          }
        } else {
          Serial.println(F("OK CMDS: DUMP | CLEAR | STATUS"));
        }
      }
      cmdLen = 0;
    } else if (cmdLen < sizeof(cmdBuf) - 1) {
      cmdBuf[cmdLen++] = c;
    }
  }
}

// ---------- Setup ----------
void setup() {
  pinMode(LOG_LEVEL_PIN, INPUT_PULLUP);

  Serial.begin(115200);

  pixel.begin();
  pixel.setBrightness(100);
  led_idle();

  if (!LittleFS.begin()) {
    LittleFS.format();
    LittleFS.begin();
  }

  Wire.setSDA(I2C_SDA_PIN);
  Wire.setSCL(I2C_SCL_PIN);
  Wire.begin();

  if (!bmp.begin(BMP_ADDR)) {
    led_error();
    delay(400);
    led_idle();
  } else {
    bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,
                    Adafruit_BMP280::SAMPLING_X2,
                    Adafruit_BMP280::SAMPLING_X16,
                    Adafruit_BMP280::FILTER_X16,
                    Adafruit_BMP280::STANDBY_MS_63);
  }

  lastLogPinState = digitalRead(LOG_LEVEL_PIN);
}

// ---------- Loop ----------
void loop() {
  handleSerial();

  bool logPin = digitalRead(LOG_LEVEL_PIN);
  if (logPin != lastLogPinState) {
    delay(20);
    if (digitalRead(LOG_LEVEL_PIN) == logPin) {
      if (logPin == LOW && !loggingActive) {
        // Start new flight
        float sum = 0.0f;
        for (int i = 0; i < ZERO_SAMPLES; i++) {
          sum += bmp.readAltitude(SEA_LEVEL_HPA);
          delay(2);
        }
        alt0 = sum / ZERO_SAMPLES;
        t0 = millis();

        File f = LittleFS.open(CSV_FILE, LittleFS.exists(CSV_FILE) ? "a" : "w");
        if (f) {
          if (f.size() == 0) f.println(F("time_s,alt_m"));
          flightNumber++;
          f.print(F("FLIGHT,"));
          f.println(flightNumber);
          f.close();
        }

        loggingActive = true;
        led_log();
      } else if (logPin == HIGH && loggingActive) {
        loggingActive = false;
        led_idle();
      }
      lastLogPinState = logPin;
    }
  }

  // Sample while logging
  static unsigned long lastSample = 0;
  if (loggingActive && (millis() - lastSample >= SAMPLE_MS)) {
    lastSample = millis();
    float alt = bmp.readAltitude(SEA_LEVEL_HPA) - alt0;
    float t   = (millis() - t0) / 1000.0f;

    File f = LittleFS.open(CSV_FILE, "a");
    if (f) {
      f.print(t, 2);
      f.print(',');
      f.println(alt, 2);
      f.close();
    }

    led_blink();
    delay(3);
    led_log();
  }
}
